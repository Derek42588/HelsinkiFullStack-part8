{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\derek\\\\webdev\\\\HelsinkiFullStack\\\\part8\\\\library-frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\derek\\\\webdev\\\\HelsinkiFullStack\\\\part8\\\\library-frontend\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport Authors from './components/Authors';\nimport Books from './components/Books';\nimport NewBook from './components/NewBook';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst ALL_AUTHORS = gql`\n{\n  allAuthors{\n    name\n    born\n  }\n}\n`;\nconst ALL_BOOKS = gql`\n{\n  allBooks {\n    title\n    author\n    published\n  }\n}\n`;\nconst CREATE_BOOK = gql`\n  mutation createBook($title: String!, $publishedInt: Int!, $author: String!, $genres: [String!]!) {\n    addBook(\n      title: $title,\n      published: $publishedInt,\n      author: $author,\n      genres: $genres\n    ) {\n      title\n      published\n      id\n      author\n      genres\n    }\n  }\n`;\nconst EDIT_AUTHOR = gql`\n  mutation editAuthor($name: String!, $born: Int!) {\n    editAuthor(name: $name, setBornTo: $born) {\n      name\n      born\n      id\n      bookCount\n    }\n  }\n`;\n\nconst App = () => {\n  const _useState = useState('authors'),\n        _useState2 = _slicedToArray(_useState, 2),\n        page = _useState2[0],\n        setPage = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errorMessage = _useState4[0],\n        setErrorMessage = _useState4[1];\n\n  const authors = useQuery(ALL_AUTHORS);\n  const books = useQuery(ALL_BOOKS);\n\n  const handleError = error => {\n    if (error.graphQLErrors[0] !== undefined) {\n      setErrorMessage(error.graphQLErrors[0].message);\n    } else {\n      setErrorMessage(error);\n    }\n\n    setTimeout(() => {\n      setErrorMessage(null);\n    }, 10000);\n  };\n\n  const _useMutation = useMutation(CREATE_BOOK, {\n    onError: handleError,\n    refetchQueries: [{\n      query: ALL_AUTHORS\n    }, {\n      query: ALL_BOOKS\n    }]\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        addBook = _useMutation2[0];\n\n  const _useMutation3 = useMutation(EDIT_AUTHOR, {\n    onError: handleError,\n    refetchQueries: [{\n      query: ALL_AUTHORS\n    }, {\n      query: ALL_BOOKS\n    }]\n  }),\n        _useMutation4 = _slicedToArray(_useMutation3, 1),\n        editAuthor = _useMutation4[0];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setPage('authors'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"authors\"), React.createElement(\"button\", {\n    onClick: () => setPage('books'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"books\"), React.createElement(\"button\", {\n    onClick: () => setPage('add'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"add book\")), errorMessage && React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, errorMessage), React.createElement(Authors, {\n    authors: authors,\n    editAuthor: editAuthor,\n    show: page === 'authors',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(Books, {\n    books: books,\n    show: page === 'books',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(NewBook, {\n    addBook: addBook,\n    show: page === 'add',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/derek/webdev/HelsinkiFullStack/part8/library-frontend/src/App.js"],"names":["React","useState","Authors","Books","NewBook","useQuery","useMutation","gql","ALL_AUTHORS","ALL_BOOKS","CREATE_BOOK","EDIT_AUTHOR","App","page","setPage","errorMessage","setErrorMessage","authors","books","handleError","error","graphQLErrors","undefined","message","setTimeout","onError","refetchQueries","query","addBook","editAuthor","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Authors from './components/Authors'\r\nimport Books from './components/Books'\r\nimport NewBook from './components/NewBook'\r\nimport { useQuery, useMutation } from 'react-apollo'\r\nimport { gql } from 'apollo-boost'\r\n\r\nconst ALL_AUTHORS = gql`\r\n{\r\n  allAuthors{\r\n    name\r\n    born\r\n  }\r\n}\r\n`\r\n\r\nconst ALL_BOOKS = gql`\r\n{\r\n  allBooks {\r\n    title\r\n    author\r\n    published\r\n  }\r\n}\r\n`\r\n\r\nconst CREATE_BOOK = gql`\r\n  mutation createBook($title: String!, $publishedInt: Int!, $author: String!, $genres: [String!]!) {\r\n    addBook(\r\n      title: $title,\r\n      published: $publishedInt,\r\n      author: $author,\r\n      genres: $genres\r\n    ) {\r\n      title\r\n      published\r\n      id\r\n      author\r\n      genres\r\n    }\r\n  }\r\n`\r\n\r\nconst EDIT_AUTHOR = gql`\r\n  mutation editAuthor($name: String!, $born: Int!) {\r\n    editAuthor(name: $name, setBornTo: $born) {\r\n      name\r\n      born\r\n      id\r\n      bookCount\r\n    }\r\n  }\r\n`\r\n\r\nconst App = () => {\r\n  const [page, setPage] = useState('authors')\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const authors = useQuery(ALL_AUTHORS)\r\n  const books = useQuery(ALL_BOOKS)\r\n\r\n  const handleError = (error) => {\r\n    if (error.graphQLErrors[0] !== undefined ) {\r\n    setErrorMessage(error.graphQLErrors[0].message)\r\n    } else {\r\n      setErrorMessage(error)\r\n    }\r\n    setTimeout(() => {\r\n      setErrorMessage(null)\r\n    }, 10000)\r\n  }\r\n\r\n  const [addBook] = useMutation(CREATE_BOOK, {\r\n    onError: handleError,\r\n    refetchQueries: [{ query: ALL_AUTHORS}, {query: ALL_BOOKS}]\r\n  })\r\n\r\n  const [editAuthor] = useMutation(EDIT_AUTHOR, {\r\n    onError: handleError,\r\n    refetchQueries: [{ query: ALL_AUTHORS}, {query: ALL_BOOKS}]\r\n\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button onClick={() => setPage('authors')}>authors</button>\r\n        <button onClick={() => setPage('books')}>books</button>\r\n        <button onClick={() => setPage('add')}>add book</button>\r\n      </div>\r\n\r\n      {errorMessage &&\r\n      <div style = {{color: 'red'}}>\r\n        {errorMessage}\r\n      </div>\r\n      }\r\n\r\n      <Authors\r\n        authors = {authors}\r\n        editAuthor = { editAuthor } \r\n        show={page === 'authors'}\r\n      />\r\n\r\n      <Books\r\n        books = { books }\r\n        show={page === 'books'}\r\n      />\r\n\r\n      <NewBook\r\n        addBook = { addBook } \r\n        show={page === 'add'}\r\n      />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}