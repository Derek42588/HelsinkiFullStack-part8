{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\derek\\\\webdev\\\\HelsinkiFullStack\\\\part8\\\\library-frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\derek\\\\webdev\\\\HelsinkiFullStack\\\\part8\\\\library-frontend\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport Authors from './components/Authors';\nimport Books from './components/Books';\nimport NewBook from './components/NewBook';\nimport LoginForm from './components/LoginForm';\nimport { useQuery, useMutation, useApolloClient } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst ALL_AUTHORS = gql`\n{\n  allAuthors{\n    name\n    born\n    bookCount\n  }\n}\n`;\nconst USER = gql`\nquery {\n  me {\n    username\n    favorite\n  }\n}\n`;\nconst ALL_BOOKS = gql`\n{\n  allBooks {\n    title\n    author {\n      name\n      born\n    }\n    published\n    genres\n  }\n}\n`;\nconst BOOKS_BY_GENRE = gql`\n  query genreBooks($genre: String!) {\n  allBooks(genre: $genre) {\n    title\n    author {\n      name\n      born\n    }\n    published\n    genres\n  }\n}\n\n`;\nconst CREATE_BOOK = gql`\n  mutation createBook($title: String!, $publishedInt: Int!, $author: String!, $genres: [String!]!) {\n    addBook(\n      title: $title,\n      published: $publishedInt,\n      author: $author,\n      genres: $genres\n    ) {\n      title\n      published\n      id\n      author {\n        name\n        born\n      }\n      genres\n    }\n  }\n`;\nconst LOGIN = gql`\n  mutation login($username: String!, $password: String!){\n    login(username: $username, password: $password){\n      value\n    }\n\n  }\n`;\nconst EDIT_AUTHOR = gql`\n  mutation editAuthor($name: String!, $born: Int!) {\n    editAuthor(name: $name, setBornTo: $born) {\n      name\n      born\n      id\n      bookCount\n    }\n  }\n`;\nconst MAKE_FAVORITE = gql`\n  mutation addFavorite($favorite: String!) {\n    addFavorite(favorite: $favorite) {\n      username\n      favorite\n    }\n  }\n`;\n\nconst App = () => {\n  const _useState = useState('authors'),\n        _useState2 = _slicedToArray(_useState, 2),\n        page = _useState2[0],\n        setPage = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errorMessage = _useState4[0],\n        setErrorMessage = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        token = _useState6[0],\n        setToken = _useState6[1];\n\n  const _useState7 = useState({\n    g: \"\"\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        genreFilter = _useState8[0],\n        setGenreFilter = _useState8[1];\n\n  const authors = useQuery(ALL_AUTHORS);\n  const books = useQuery(ALL_BOOKS);\n  const user = useQuery(USER);\n  const filteredBooks = useQuery(BOOKS_BY_GENRE, {\n    variables: {\n      genre: genreFilter.g\n    }\n  });\n  const client = useApolloClient();\n\n  const handleError = error => {\n    setErrorMessage(error.graphQLErrors[0].message);\n    setTimeout(() => {\n      setErrorMessage(null);\n    }, 10000);\n  };\n\n  const logout = () => {\n    setToken(null);\n    localStorage.clear();\n    client.resetStore();\n  };\n\n  const errorNotification = () => errorMessage && React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, errorMessage);\n\n  const _useMutation = useMutation(CREATE_BOOK, {\n    onError: handleError,\n    refetchQueries: [{\n      query: ALL_AUTHORS\n    }, {\n      query: ALL_BOOKS\n    }, {\n      query: USER\n    }]\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        addBook = _useMutation2[0];\n\n  const _useMutation3 = useMutation(MAKE_FAVORITE, {\n    onError: handleError,\n    refetchQueries: [{\n      query: ALL_AUTHORS\n    }, {\n      query: ALL_BOOKS\n    }, {\n      query: USER\n    }]\n  }),\n        _useMutation4 = _slicedToArray(_useMutation3, 1),\n        makeFavorite = _useMutation4[0];\n\n  const _useMutation5 = useMutation(LOGIN, {\n    onError: handleError,\n    update: (store, response) => {\n      const dataInStore = store.readQuery({\n        query: USER\n      });\n      console.log(dataInStore.user);\n      dataInStore.user.push(response.data.user);\n      store.writeQuery({\n        query: USER,\n        data: dataInStore\n      });\n    } // refetchQueries: [{ query: ALL_AUTHORS}, {query: ALL_BOOKS}, {query: USER} ]\n\n  }),\n        _useMutation6 = _slicedToArray(_useMutation5, 1),\n        loginUser = _useMutation6[0];\n\n  const _useMutation7 = useMutation(EDIT_AUTHOR, {\n    onError: handleError,\n    refetchQueries: [{\n      query: ALL_AUTHORS\n    }, {\n      query: ALL_BOOKS\n    }, {\n      query: USER\n    }]\n  }),\n        _useMutation8 = _slicedToArray(_useMutation7, 1),\n        editAuthor = _useMutation8[0];\n\n  if (!token) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => setPage('authors'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"authors\"), React.createElement(\"button\", {\n      onClick: () => setPage('books'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"books\"), React.createElement(\"button\", {\n      onClick: () => setPage('login'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"login\")), errorNotification(), React.createElement(Authors, {\n      authors: authors,\n      editAuthor: editAuthor,\n      show: page === 'authors',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(Books, {\n      books: books,\n      fax: filteredBooks,\n      filter: genreFilter.g,\n      page: page,\n      setGenreFilter: filter => setGenreFilter(filter),\n      user: user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(LoginForm, {\n      login: loginUser,\n      setToken: token => setToken(token),\n      show: page === 'login',\n      refetchUser: () => user.refetch(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setPage('authors'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"authors\"), React.createElement(\"button\", {\n    onClick: () => setPage('books'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, \"books\"), React.createElement(\"button\", {\n    onClick: () => setPage('add'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \"add book\"), React.createElement(\"button\", {\n    onClick: () => {\n      setPage('recommendations');\n      setGenreFilter({\n        g: user.data.me.favorite\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"recommendations\"), React.createElement(\"button\", {\n    onClick: () => logout(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, \"logout\")), errorMessage && React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, errorMessage), React.createElement(Authors, {\n    authors: authors,\n    editAuthor: editAuthor,\n    show: page === 'authors',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }), React.createElement(Books, {\n    books: books,\n    fax: filteredBooks,\n    filter: genreFilter.g,\n    page: page,\n    setGenreFilter: filter => setGenreFilter(filter),\n    show: page === 'books' || page === 'recommendations',\n    makeFavorite: makeFavorite,\n    user: user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }), React.createElement(NewBook, {\n    addBook: addBook,\n    show: page === 'add',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/derek/webdev/HelsinkiFullStack/part8/library-frontend/src/App.js"],"names":["React","useState","Authors","Books","NewBook","LoginForm","useQuery","useMutation","useApolloClient","gql","ALL_AUTHORS","USER","ALL_BOOKS","BOOKS_BY_GENRE","CREATE_BOOK","LOGIN","EDIT_AUTHOR","MAKE_FAVORITE","App","page","setPage","errorMessage","setErrorMessage","token","setToken","g","genreFilter","setGenreFilter","authors","books","user","filteredBooks","variables","genre","client","handleError","error","graphQLErrors","message","setTimeout","logout","localStorage","clear","resetStore","errorNotification","color","onError","refetchQueries","query","addBook","makeFavorite","update","store","response","dataInStore","readQuery","console","log","push","data","writeQuery","loginUser","editAuthor","filter","refetch","me","favorite"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Authors from './components/Authors'\r\nimport Books from './components/Books'\r\nimport NewBook from './components/NewBook'\r\nimport LoginForm from './components/LoginForm'\r\nimport { useQuery, useMutation, useApolloClient } from 'react-apollo'\r\nimport { gql } from 'apollo-boost'\r\n\r\nconst ALL_AUTHORS = gql`\r\n{\r\n  allAuthors{\r\n    name\r\n    born\r\n    bookCount\r\n  }\r\n}\r\n`\r\n\r\nconst USER = gql`\r\nquery {\r\n  me {\r\n    username\r\n    favorite\r\n  }\r\n}\r\n`\r\n\r\nconst ALL_BOOKS = gql`\r\n{\r\n  allBooks {\r\n    title\r\n    author {\r\n      name\r\n      born\r\n    }\r\n    published\r\n    genres\r\n  }\r\n}\r\n`\r\nconst BOOKS_BY_GENRE = gql`\r\n  query genreBooks($genre: String!) {\r\n  allBooks(genre: $genre) {\r\n    title\r\n    author {\r\n      name\r\n      born\r\n    }\r\n    published\r\n    genres\r\n  }\r\n}\r\n\r\n`\r\n\r\nconst CREATE_BOOK = gql`\r\n  mutation createBook($title: String!, $publishedInt: Int!, $author: String!, $genres: [String!]!) {\r\n    addBook(\r\n      title: $title,\r\n      published: $publishedInt,\r\n      author: $author,\r\n      genres: $genres\r\n    ) {\r\n      title\r\n      published\r\n      id\r\n      author {\r\n        name\r\n        born\r\n      }\r\n      genres\r\n    }\r\n  }\r\n`\r\nconst LOGIN = gql`\r\n  mutation login($username: String!, $password: String!){\r\n    login(username: $username, password: $password){\r\n      value\r\n    }\r\n\r\n  }\r\n`\r\n\r\nconst EDIT_AUTHOR = gql`\r\n  mutation editAuthor($name: String!, $born: Int!) {\r\n    editAuthor(name: $name, setBornTo: $born) {\r\n      name\r\n      born\r\n      id\r\n      bookCount\r\n    }\r\n  }\r\n`\r\nconst MAKE_FAVORITE = gql`\r\n  mutation addFavorite($favorite: String!) {\r\n    addFavorite(favorite: $favorite) {\r\n      username\r\n      favorite\r\n    }\r\n  }\r\n`\r\n\r\nconst App = () => {\r\n  const [page, setPage] = useState('authors')\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [token, setToken] = useState(null)\r\n  const [genreFilter, setGenreFilter] = useState({g: \"\"})\r\n  const authors = useQuery(ALL_AUTHORS)\r\n  const books = useQuery(ALL_BOOKS)\r\n  const user = useQuery(USER)\r\n  \r\n  const filteredBooks = useQuery(BOOKS_BY_GENRE, {\r\n    variables: {genre: genreFilter.g}\r\n  })\r\n\r\n\r\n  const client = useApolloClient()\r\n\r\n  const handleError = (error) => {\r\n    setErrorMessage(error.graphQLErrors[0].message)\r\n    setTimeout(() => {\r\n      setErrorMessage(null)\r\n    }, 10000)\r\n  }\r\n\r\n  const logout = () => {\r\n    setToken(null)\r\n    localStorage.clear()\r\n    client.resetStore()\r\n  }\r\n\r\n  const errorNotification = () => errorMessage &&\r\n  <div style={{ color: 'red' }}>\r\n    {errorMessage}\r\n  </div>\r\n\r\n  const [addBook] = useMutation(CREATE_BOOK, {\r\n    onError: handleError,\r\n    refetchQueries: [{ query: ALL_AUTHORS}, {query: ALL_BOOKS}, {query: USER}]\r\n  })\r\n\r\n  const [makeFavorite] = useMutation(MAKE_FAVORITE, {\r\n    onError: handleError,\r\n    refetchQueries: [{ query: ALL_AUTHORS}, {query: ALL_BOOKS}, {query: USER}]\r\n  })\r\n\r\n  const [loginUser] = useMutation(LOGIN, {\r\n    onError: handleError,\r\n    update: (store, response) => {\r\n      const dataInStore = store.readQuery({query: USER})\r\n      console.log(dataInStore.user)\r\n      dataInStore.user.push(response.data.user)\r\n      store.writeQuery({\r\n        query: USER,\r\n        data: dataInStore\r\n      })\r\n    }\r\n    // refetchQueries: [{ query: ALL_AUTHORS}, {query: ALL_BOOKS}, {query: USER} ]\r\n  })\r\n\r\n  const [editAuthor] = useMutation(EDIT_AUTHOR, {\r\n    onError: handleError,\r\n    refetchQueries: [{ query: ALL_AUTHORS}, {query: ALL_BOOKS}, {query: USER}]\r\n\r\n  })\r\n\r\n    if (!token) {\r\n    return ( \r\n      <div>\r\n        <div>\r\n        <button onClick={() => setPage('authors')}>authors</button>\r\n        <button onClick={() => setPage('books')}>books</button>\r\n        <button onClick={() => setPage('login')}>login</button>\r\n      </div>\r\n        {errorNotification()}\r\n\r\n      <Authors\r\n        authors = {authors}\r\n        editAuthor = { editAuthor } \r\n        show={page === 'authors'}\r\n      />\r\n\r\n      <Books\r\n        books = { books }\r\n        fax = { filteredBooks }\r\n        filter = {genreFilter.g}\r\n        page = {page}\r\n\r\n        setGenreFilter = {(filter) => setGenreFilter(filter)}\r\n        user = {user}\r\n      />\r\n\r\n      <LoginForm \r\n          login = {loginUser}\r\n          setToken = {(token) => setToken(token)}\r\n          show={page === 'login'}\r\n          refetchUser = {() => user.refetch()}\r\n          />\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button onClick={() => setPage('authors')}>authors</button>\r\n        <button onClick={() => setPage('books')}>books</button>\r\n        <button onClick={() => setPage('add')}>add book</button>\r\n        <button onClick={() => {\r\n          setPage('recommendations')\r\n          setGenreFilter({g: user.data.me.favorite})\r\n        }\r\n          }>recommendations</button>\r\n        <button onClick={() => logout()}>logout</button>\r\n\r\n      </div>\r\n\r\n      {errorMessage &&\r\n      <div style = {{color: 'red'}}>\r\n        {errorMessage}\r\n      </div>\r\n      }\r\n\r\n      <Authors\r\n        authors = {authors}\r\n        editAuthor = { editAuthor } \r\n        show={page === 'authors'}\r\n      />\r\n\r\n      <Books\r\n        books = { books }\r\n        fax = { filteredBooks }\r\n        filter = {genreFilter.g}\r\n        page = {page}\r\n        setGenreFilter = {(filter) => setGenreFilter(filter)}\r\n        show= {page === 'books' || page === 'recommendations'}\r\n        makeFavorite = { makeFavorite }\r\n        user = {user}\r\n\r\n      />\r\n\r\n      <NewBook\r\n        addBook = { addBook } \r\n        show={page === 'add'}\r\n      />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}